selection_data$TIME_PERIOD <- as.numeric(selection_data$TIME_PERIOD)
unique(selection_data$REF_AREA)
View(unique_values)
min(selection_data$TIME_PERIOD)
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$PRICE_BASE),
UNIT_MEASURE = unique(selection_data$UNIT_MEASURE))
all_countries <- unique(selection_data$REF_AREA)
#create the sequece for from the smallest year to the largest year
all_years <- seq(min(selection_data$TIME_PERIOD, na.rm = TRUE), max(selection_data$TIME_PERIOD, na.rm = TRUE), by = 1)
# Create a full grid of TIME_PERIOD, REF_AREA, MEASURE, and UNIT_MEASURE
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$PRICE_BASE),
UNIT_MEASURE = unique(selection_data$UNIT_MEASURE))
full_grid
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$PRICE_BASE),
UNIT_MEASURE = unique(selection_data$MEASURE))
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$PRICE_BASE))
full_grid
full_grid$TIME_PERIOD <- as.numeric(full_grid$TIME_PERIOD)
full_grid
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$MEASURE),
UNIT_MEASURE = unique(selection_data$UNIT_MEASURE))
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$PRICE_BASE),
UNIT_MEASURE = unique(selection_data$UNIT_MEASURE))
full_grid$TIME_PERIOD <- as.numeric(full_grid$TIME_PERIOD)
selection_data <- full_grid %>%
left_join(selection_data, by = c("TIME_PERIOD", "REF_AREA", "MEASURE", "UNIT_MEASURE"))
selection_data <- full_grid %>%
left_join(selection_data, by = c("TIME_PERIOD", "REF_AREA", "PRICE_BASE", "UNIT_MEASURE"))
head(selection_data)
selection_data <- full_grid %>%
left_join(selection_data, by = c("TIME_PERIOD", "UNIT_MEASURE", "REF_AREA", "PRICE_BASE"))
rlang::last_trace()
colnames(selection_data)
colnames(full_grid)
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
MEASURE = unique(selection_data$PRICE_BASE),
UNIT_MEASURE = unique(selection_data$UNIT_MEASURE))
full_grid$TIME_PERIOD <- as.numeric(full_grid$TIME_PERIOD)
selection_data <- full_grid %>%
left_join(selection_data, by = c("TIME_PERIOD", "UNIT_MEASURE", "REF_AREA", "PRICE_BASE"))
# Create full grid
full_grid <- expand.grid(
TIME_PERIOD = all_years,
REF_AREA = all_countries,
PRICE_BASE = unique(selection_data$PRICE_BASE),
UNIT_MEASURE = unique(selection_data$UNIT_MEASURE)
)
full_grid$TIME_PERIOD <- as.numeric(full_grid$TIME_PERIOD)
# Perform the left join
selection_data <- full_grid %>%
left_join(selection_data, by = c("TIME_PERIOD", "UNIT_MEASURE", "REF_AREA", "PRICE_BASE"))
# Print the resulting data frame to verify the join
print(selection_data)
View(raw_data)
View(raw_data)
#pivot_wide the data
wide_data <- selection_data %>%
pivot_wider(
names_from = c(TIME_PERIOD, PRICE_BASE),
values_from = ObsValue,
names_sep = "_"
)
wide_data
#pivot_wide the data
wide_data <- selection_data %>%
pivot_wider(
names_from = c(PRICE_BASE),
values_from = ObsValue,
names_sep = "_"
)
wide_data
selection_data
#pivot_wide the data
wide_data <- selection_data %>%
pivot_wider(
names_from = c (ObsValue, PRICE_BASE),
values_from = ObsValue,
names_sep = "_"
)
wide_data
#pivot_wide the data
wide_data <- selection_data %>%
pivot_wider(
names_from = c (PRICE_BASE),
values_from = ObsValue,
names_sep = "_"
)
#pivot_wide the data
wide_data <- selection_data %>%
pivot_wider(
names_from = c (PRICE_BASE, ObsValue),
values_from = ObsValue,
names_sep = "_"
)
wide_data
#pivot_wide the data
wide_data <- selection_data %>%
pivot_wider(
names_from = c(PRICE_BASE),
values_from = ObsValue,
names_sep = "_"
)
View(wide_data)
selection_data
wide_data
years_count <- selection_data %>% group_by(REF_AREA, V, LR) %>% summmzrize(year_of_data = n_distinct(TIME_PERIOD), . groups = 'drop')
years_count <- selection_data %>% group_by(REF_AREA, V, LR) %>% summmzrize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
years_count <- selection_data %>% group_by(REF_AREA, V, LR) %>%  summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
years_count <- wide_data %>% group_by(REF_AREA, V, LR) %>%  summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
years_count
View(years_count)
#remove any counties that have shorter than 25 years
years_count <- wide_data %>%
filter(!is.na(V, LR))
#remove any counties that have shorter than 25 years
years_count <- wide_data %>%
filter(!is.na(V)) %>%
filter(!is.na(LR)) %>%
group_by(REF_AREA, V, LR) %>%
summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
years_count
# Create a small test dataset
test_data <- data.frame(
TIME_PERIOD = rep(2000:2020, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 21),
MEASURE = rep("GDP", 84),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 21),
ObsValue = c(rnorm(80, mean = 20000, sd = 5000), rep(NA, 4))  # Introduce some NA values
)
test_data
years_count <- test_data %>%
filter(!is.na(V)) %>%
filter(!is.na(LR)) %>%
group_by(REF_AREA, V, LR) %>%
summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
wide_data
test_data <- data.frame(
TIME_PERIOD = rep(1950:1975, each = 2),
REF_AREA = rep("SEN", times = 52),
UNIT_MEASURE = rep("USD_PPP", times = 52),
PRICE_BASE = rep(c("V", "LR"), times = 26),
ObsValue = c(rep(NA, 26), rnorm(26, mean = 20000, sd = 5000))  # NA values for "V", some values for "LR"
)
test_data
# Create a small test dataset
# 创建一个小的测试数据集
test_data <- data.frame(
TIME_PERIOD = rep(1950:1975, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 26),
UNIT_MEASURE = rep("USD_PPP", times = 104),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 26),
ObsValue = c(rnorm(52, mean = 20000, sd = 5000), rep(NA, 52))  # "V" 有值， "LR" 有 NA
)
# 将数据透视为宽格式
test_wide_data <- test_data %>%
pivot_wider(
names_from = PRICE_BASE,
values_from = ObsValue
)
# 查看宽格式数据
print(test_wide_data)
print(test_wide_data)
years_count <- test_wide_data  %>%
filter(!is.na(V)) %>%
filter(!is.na(LR)) %>%
group_by(REF_AREA, V, LR) %>%
summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
countries_to_keep <- years_count %>%
filter(years_of_data >= 25) %>%
pull(REF_AREA)
years_count
years_count <- test_wide_data  %>%
filter(!is.na(V)) %>%
filter(!is.na(LR)) %>%
group_by(REF_AREA, V, LR) %>%
summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
years_count
test_wide_data
years_count <- test_wide_data  %>%
filter(!is.na(V)) %>%
filter(!is.na(LR)) %>%
group_by(REF_AREA, V, LR) %>%
summarize(year_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
countries_to_keep <- years_count %>%
filter(years_of_data >= 25) %>%
pull(REF_AREA
countries_to_keep <- years_count %>%
countries_to_keep <- years_count %>%
filter(years_of_data >= 25) %>%
pull(REF_AREA)
# Count the number of years for each country, excluding NA values
years_count <- test_wide_data %>%
filter(!is.na(V) & !is.na(LR)) %>%  # Ensure rows with NA values are excluded
group_by(REF_AREA) %>%
summarize(years_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
# Filter countries with at least 25 years of data
countries_to_keep <- years_count %>%
filter(years_of_data >= 25) %>%
pull(REF_AREA)
# Filter the original wide_data to keep only the selected countries
filtered_data <- test_wide_data %>%
filter(REF_AREA %in% countries_to_keep)
# Print the filtered data
print(filtered_data)
# Count the number of years for each country and each price base
years_count <- test_wide_data %>%
group_by(REF_AREA) %>%
summarize(
years_of_V = sum(!is.na(V)),
years_of_LR = sum(!is.na(LR)),
.groups = 'drop'
)
# Filter countries with at least 25 years of data for both V and LR
countries_to_keep <- years_count %>%
filter(years_of_V >= 25 & years_of_LR >= 25) %>%
pull(REF_AREA)
# Filter the original wide_data to keep only the selected countries
filtered_data <- test_wide_data %>%
filter(REF_AREA %in% countries_to_keep)
# Print the filtered data
print(filtered_data)
test_wide_data
View(test_wide_data)
test_data <- data.frame(
TIME_PERIOD = rep(1950:1980, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 31),
UNIT_MEASURE = rep("USD_PPP", times = 124),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 31),
ObsValue = c(rnorm(62, mean = 20000, sd = 5000), rnorm(62, mean = 15000, sd = 4000))  # Enough data for "V" and "LR"
)
# Pivoting data to wide format
test_wide_data <- test_data %>%
pivot_wider(
names_from = PRICE_BASE,
values_from = ObsValue
)
# View the wide data
print(test_wide_data)
View(test_wide_data)
# Create a test dataset where one country has at least 25 years of both V and LR data
test_data <- data.frame(
TIME_PERIOD = rep(1950:1980, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 31),
UNIT_MEASURE = rep("USD_PPP", times = 124),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 31),
ObsValue = c(rnorm(62, mean = 20000, sd = 5000), rnorm(62, mean = 15000, sd = 4000))
)
# Manually adjust data to ensure at least one country has at least 25 years for both V and LR
test_data$ObsValue[1:50] <- NA  # Make some values NA to test the filtering logic
# Pivoting data to wide format
test_wide_data <- test_data %>%
pivot_wider(
names_from = PRICE_BASE,
values_from = ObsValue
)
# View the wide data
print(test_wide_dat
# Create a test dataset where one country has at least 25 years of both V and LR data
test_data <- data.frame(
# Create a test dataset where one country has at least 25 years of both V and LR data
test_data <- data.frame(
TIME_PERIOD = rep(1950:1980, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 31),
UNIT_MEASURE = rep("USD_PPP", times = 124),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 31),
ObsValue = c(rnorm(62, mean = 20000, sd = 5000), rnorm(62, mean = 15000, sd = 4000))
)
# Manually adjust data to ensure at least one country has at least 25 years for both V and LR
test_data$ObsValue[1:50] <- NA  # Make some values NA to test the filtering logic
# Pivoting data to wide format
test_wide_data <- test_data %>%
pivot_wider(
names_from = PRICE_BASE,
values_from = ObsValue
)
# View the wide data
print(test_wide_data)
View(test_wide_data)
# Create a test dataset where one country has at least 25 years of both V and LR data
test_data <- data.frame(
TIME_PERIOD = rep(1950:1980, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 31),
UNIT_MEASURE = rep("USD_PPP", times = 124),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 31),
ObsValue = c(rnorm(62, mean = 20000, sd = 5000), rnorm(62, mean = 15000, sd = 4000))
)
# Manually adjust data to ensure at least one country has at least 25 years for both V and LR
test_data$ObsValue[1:50] <- NA  # Make some values NA to test the filtering logic
# Pivoting data to wide format
test_wide_data <- test_data %>%
pivot_wider(
names_from = PRICE_BASE,
values_from = ObsValue
)
# View the wide data
print(test_wide_data)
View(test_wide_data)
# Create a test dataset where one country has at least 25 years of both V and LR data
test_data <- data.frame(
TIME_PERIOD = rep(1950:1980, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 31),
UNIT_MEASURE = rep("USD_PPP", times = 124),
PRICE_BASE = rep(c("V", "LR"), each = 2, times = 31),
ObsValue = c(rnorm(62, mean = 20000, sd = 5000), rnorm(62, mean = 15000, sd = 4000))
)
# Manually adjust data to ensure at least one country has at least 25 years for both V and LR
# For example, ensuring "USA" has complete data for both V and LR for at least 25 years
test_data$ObsValue[test_data$REF_AREA == "USA" & test_data$PRICE_BASE == "V"][1:25] <- rnorm(25, mean = 20000, sd = 5000)
test_data$ObsValue[test_data$REF_AREA == "USA" & test_data$PRICE_BASE == "LR"][1:25] <- rnorm(25, mean = 15000, sd = 4000)
# Pivoting data to wide format
test_wide_data <- test_data %>%
pivot_wider(
names_from = PRICE_BASE,
values_from = ObsValue
)
# View the wide data
print(test_wide_data)
View(test_wide_data)
# Create the test dataset based on the provided data
test_data <- data.frame(
TIME_PERIOD = rep(1950:1980, each = 4),
REF_AREA = rep(c("USA", "CAN", "MEX", "FRA"), times = 31),
UNIT_MEASURE = rep("USD_PPP", times = 124),
V = c(22336.277, 21981.929, NA, NA, 15628.626, 23546.208, NA, NA, 16529.523, 27146.871, NA, NA,
20231.649, 22597.650, NA, NA, 15815.554, 18621.529, NA, NA, 23084.403, 13930.509, NA, NA,
14214.317, 24909.700, NA, NA, 13107.748, 17487.535, NA, NA, 26423.267, 24275.183, NA, NA,
19494.115, 28547.466, NA, NA, 19518.416, 24187.387, NA, NA, 25741.455, 21274.495, NA, NA,
27059.941, 19078.555, NA, NA, 25626.902, 18011.599, NA, NA, 17554.025, 23142.647, NA, NA,
22458.155, 17422.908, NA, NA, 20715.036, 12684.370, NA, NA, 21221.869, 12869.689, NA, NA,
21567.120, 15008.749, NA, NA, 9599.529, 16577.557, NA, NA, 16732.159, 17473.868, NA, NA,
17871.651, 10407.649, NA, NA, 20913.738, 14256.098, NA, NA, 23411.084, 15087.727, NA, NA,
18726.847, 14524.074, NA, NA, 12165.705, 17234.127, NA, NA, 15289.909, 22941.588, NA, NA,
13841.506, 20896.366, NA, NA, 12531.387, 14825.503, NA, NA, 19379.054, 14633.368, NA, NA,
14758.192, 10572.117, NA, NA),
LR = c(NA, NA, 19980.194, 11378.041, NA, NA, 20569.647, 7287.212, NA, NA, 17673.401, 25069.819,
NA, NA, 19772.717, 20936.655, NA, NA, 32423.796, 11550.534, NA, NA, 15672.884, 26503.323,
NA, NA, 22025.813, 7005.896, NA, NA, 27093.539, 14547.933, NA, NA, 15153.221, 21504.254,
NA, NA, 21164.259, 26755.873, NA, NA, 17922.915, 20091.573, NA, NA, 26178.103, 25298.492,
NA, NA, 15925.244, 20866.207, NA, NA, 21584.908, 21330.181, NA, NA, 23679.532, 18188.162,
NA, NA, 18022.116, 19198.095, NA, NA, 14645.923, 16718.923, NA, NA, 13510.756, 19403.948,
NA, NA, 11778.356, 18585.281, NA, NA, 13758.625, 16536.582, NA, NA, 13463.981, 13471.110,
NA, NA, 18938.151, 18433.559, NA, NA, 21113.787, 16858.348, NA, NA, 19273.415, 13524.889,
NA, NA, 11886.362, 20431.462, NA, NA, 19054.181, 20194.906, NA, NA, 16216.956, 16013.440,
NA, NA, 19339.193, 14106.115, NA, NA, 18164.070, 9344.492, NA, NA, 11092.991, 19044.039,
NA, NA, 13940.759, 14649.720)
)
# View the test data
print(test_data)
# Define the years and countries
years <- 1900:1930
countries <- c("A", "B", "C", "D")
# Create a data frame with all combinations of years and countries
test_data <- expand.grid(TIME_PERIOD = years, REF_AREA = countries)
# Add UNIT_MEASURE column
test_data$UNIT_MEASURE <- "USD_PPP"
# Manually input data for L and LR columns
test_data <- test_data %>%
mutate(
L = case_when(
REF_AREA == "A" ~ rnorm(n(), mean = 20000, sd = 5000),
REF_AREA == "B" ~ ifelse(TIME_PERIOD %in% c(1910, 1920), NA, rnorm(n(), mean = 15000, sd = 4000)),
REF_AREA == "C" ~ ifelse(TIME_PERIOD %in% c(1905, 1915, 1925), NA, rnorm(n(), mean = 14000, sd = 3000)),
REF_AREA == "D" ~ ifelse(TIME_PERIOD %in% c(1912, 1918, 1922), NA, rnorm(n(), mean = 13000, sd = 3500)),
TRUE ~ NA_real_
),
LR = case_when(
REF_AREA == "A" ~ rnorm(n(), mean = 25000, sd = 6000),
REF_AREA == "B" ~ ifelse(TIME_PERIOD %in% c(1915, 1925), NA, rnorm(n(), mean = 16000, sd = 4500)),
REF_AREA == "C" ~ ifelse(TIME_PERIOD %in% c(1910, 1920, 1930), NA, rnorm(n(), mean = 15000, sd = 3500)),
REF_AREA == "D" ~ ifelse(TIME_PERIOD %in% c(1908, 1914, 1928), NA, rnorm(n(), mean = 14000, sd = 4000)),
TRUE ~ NA_real_
)
)
# View the test data
print(test_data)
# Count the number of years for each country with non-NA values for both L and LR
years_count <- test_data %>%
filter(!is.na(L) & !is.na(LR)) %>%
group_by(REF_AREA) %>%
summarize(years_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
# Filter countries with at least 25 years of data
countries_to_keep <- years_count %>%
filter(years_of_data >= 25) %>%
pull(REF_AREA)
# Filter the original test_data to keep only the selected countries
filtered_data <- test_data %>%
filter(REF_AREA %in% countries_to_keep)
# Print the filtered data
print(filtered_data)
# Count the number of years for each country with non-NA values for both L and LR
years_count <- test_data %>%
filter(!is.na(L) & !is.na(LR)) %>%
group_by(REF_AREA) %>%
summarize(years_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
# Filter countries with at least 25 years of data
countries_to_keep <- years_count %>%
filter(years_of_data >= 30) %>%
pull(REF_AREA)
# Filter the original test_data to keep only the selected countries
filtered_data <- test_data %>%
filter(REF_AREA %in% countries_to_keep)
# Print the filtered data
print(filtered_data)
# Count the number of years for each country with non-NA values for both L and LR
years_count <- selection_data %>%
filter(!is.na(L) & !is.na(LR)) %>%
group_by(REF_AREA) %>%
summarize(years_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
selection_data
# Count the number of years for each country with non-NA values for both L and LR
years_count <- wide_data %>%
filter(!is.na(L) & !is.na(LR)) %>%
group_by(REF_AREA) %>%
summarize(years_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
wide_data
# Count the number of years for each country with non-NA values for both L and LR
years_count <- wide_data %>%
filter(!is.na(V) & !is.na(LR)) %>%
group_by(REF_AREA) %>%
summarize(years_of_data = n_distinct(TIME_PERIOD), .groups = 'drop')
# Filter countries with at least 25 years of data
countries_to_keep <- years_count %>%
filter(years_of_data >= 25) %>%
pull(REF_AREA)
# Filter the original test_data to keep only the selected countries
filtered_data <- wide_data %>%
filter(REF_AREA %in% countries_to_keep)
# Print the filtered data
print(filtered_data)
wide_data
View(filtered_data)
unique(filtered_data$TIME_PERIOD)
unique_values <- filtered_data %>%
summarise_all(~ list(unique(.)))
print(unique_values)
average(filtered_data$TIME_PERIOD)
mean(filter_data)
summary(filtered_data)
summary(group(filtered_data$REF_AREA))
summary(filtered_data %>% group_by(REF_AREA))
# Check if every country has data for the entire time period from 1900 to 1930
coverage_check <- filtered_data %>%
group_by(REF_AREA) %>%
summarize(complete_years = all(years %in% TIME_PERIOD), .groups = 'drop')
# Print the coverage check
print(coverage_check)
View(coverage_check)
# Check if every country has data for the entire time period from 1900 to 1930
coverage_check <- filtered_data %>%
group_by(REF_AREA) %>%
summarize(complete_years = all(1950:2023 %in% TIME_PERIOD), .groups = 'drop')
# Print the coverage check
print(coverage_check)
View(coverage_check)
print(filtered_data)
wide_data
# Count unique countries in the original wide_data
original_countries <- wide_data %>%
distinct(REF_AREA) %>%
nrow()
# Count unique countries in the filtered_data
filtered_countries <- filtered_data %>%
distinct(REF_AREA) %>%
nrow()
# Calculate the number of dropped countries
dropped_countries <- original_countries - filtered_countries
print(paste("Number of dropped countries:", dropped_countries))
# Check if every country has data for the entire time period from 1950 to 2023
time_period_range <- 1950:2023
coverage_check <- filtered_data %>%
group_by(REF_AREA) %>%
summarize(complete_years = all(time_period_range %in% TIME_PERIOD), .groups = 'drop')
# Print the coverage check
print(coverage_check)
# Number of countries with complete data for the entire period
complete_coverage <- coverage_check %>%
filter(complete_years) %>%
nrow()
print(paste("Number of countries with complete data for the entire period:", complete_coverage))
coverage_check
write.xlsx(filtered_data, file = "~/Documents/GitHub/RA-data-cleaning-work/The data process code/filtered_data.xlsx")
wide_data
View(wide_data)
raw_data
View(raw_data)
selection_data
wide_data
coverage_check
years_count
View(years_count)
write.xlsx(raw_data , file = "~/Documents/GitHub/RA-data-cleaning-work/The data process code/raw_data.xlsx")
print(coverage_check)
